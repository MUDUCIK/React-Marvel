{"version":3,"file":"static/js/732.a3eece61.chunk.js","mappings":"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","sources":["components/elements/ImageWithLoader/ImageWithLoader.jsx","components/Character/Style.js","components/Character/Character.jsx","components/CharacterInfo/CharacterBody.js","components/CharacterInfo/CharacterInfoWrapper.js","components/CharacterInfo/CharacterHeader.js","components/CharacterInfo/CharacterInfo.jsx","components/CharactersList/Grid.js","components/CharactersList/Style.js","components/CharactersList/CharactersList.jsx","components/Comics/Style.js","components/Comics/Comics.jsx","components/ComicsList/Grid.js","components/ComicsList/ComicsList.jsx","pages/Comics/Style.js","pages/Comics/Comics.jsx"],"sourcesContent":["import { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction ImageWithLoader({ src, alt, ...props }) {\r\n  const [loaded, setLoaded] = useState(false)\r\n\r\n  return (\r\n    <>\r\n      {!loaded && (\r\n        <div\r\n          className='pulse'\r\n          style={{\r\n            height: '100%',\r\n            width: '100%',\r\n            backgroundColor: '#C4C4C4',\r\n          }}\r\n        />\r\n      )}\r\n      <img\r\n        {...props}\r\n        src={src}\r\n        alt={alt ?? ''}\r\n        style={loaded ? {} : { display: 'none' }}\r\n        onLoad={() => setLoaded(true)}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nImageWithLoader.propTypes = {\r\n  src: PropTypes.oneOfType([PropTypes.string.isRequired, PropTypes.oneOf([undefined]).isRequired]),\r\n  alt: PropTypes.string,\r\n}\r\n\r\nexport default ImageWithLoader\r\n","import styled from 'styled-components'\r\n\r\nexport const Style = styled.button`\r\n  display: flex;\r\n  align-items: flex-start;\r\n\r\n  color: ${({ theme }) => theme.colors.mainTextWhite};\r\n  font-size: 1.5rem;\r\n\r\n  min-height: 320px;\r\n  width: 200px;\r\n\r\n  padding: 0;\r\n\r\n  background-color: ${({ theme }) => theme.colors.mainBgColor};\r\n  box-shadow: 5px 5px 0.45em rgba(0, 0, 0, 0.25);\r\n  transition: box-shadow 0.3s ease, transform 0.3s ease;\r\n  outline: none;\r\n  border: none;\r\n\r\n  &:focus {\r\n    transform: translateY(-10px);\r\n\r\n    box-shadow: 0 5px 20px 3px ${({ shadowColor }) => shadowColor};\r\n  }\r\n\r\n  &:hover {\r\n    transform: translateY(-10px);\r\n\r\n    box-shadow: 0 5px 20px 2px ${({ shadowColor }) => shadowColor};\r\n  }\r\n\r\n  a {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0.9375em 0;\r\n\r\n    height: 100%;\r\n    width: 100%;\r\n\r\n    padding: 0 0 1.25rem;\r\n  }\r\n\r\n  img {\r\n    height: 200px;\r\n    width: 100%;\r\n\r\n    pointer-events: none;\r\n  }\r\n\r\n  .name {\r\n    margin: 0 0.9375em 0 0.9375em;\r\n\r\n    text-transform: uppercase;\r\n    text-align: left;\r\n    line-height: 1.2;\r\n  }\r\n`\r\n","import { useState } from 'react'\r\nimport { usePalette } from 'react-palette'\r\nimport { Link } from 'react-scroll'\r\n\r\nimport { Style } from './Style'\r\nimport ImageWithLoader from '../elements/ImageWithLoader/ImageWithLoader'\r\n\r\nconst Character = ({ img, name, id, onCharSelected }) => {\r\n  const [loaded, setLoaded] = useState(false)\r\n  const {\r\n    data: { darkVibrant },\r\n  } = usePalette(img)\r\n  const smooth = document.documentElement.clientWidth <= 768\r\n\r\n  const keyPressHandler = (e) => {\r\n    const { code } = e\r\n\r\n    if (code === 'Space' || code === 'Enter') onCharSelected(id)\r\n  }\r\n\r\n  return (\r\n    <Style shadowColor={darkVibrant} onKeyPress={keyPressHandler}>\r\n      <Link\r\n        to='characterInfo'\r\n        smooth={smooth}\r\n        offset={-20}\r\n        duration={500}\r\n        onClick={() => onCharSelected(id)}\r\n      >\r\n        <div\r\n          style={{\r\n            height: '200px',\r\n          }}\r\n        >\r\n          <ImageWithLoader src={img} alt={name} />\r\n        </div>\r\n        <div className='name'>\r\n          <span>{name}</span>\r\n        </div>\r\n      </Link>\r\n    </Style>\r\n  )\r\n}\r\n\r\nexport default Character\r\n","import styled from 'styled-components'\r\n\r\nexport const CharacterBody = styled.div`\r\n  margin-top: 0.9375rem;\r\n\r\n  p {\r\n    font-size: 14px;\r\n    line-height: 1.2;\r\n  }\r\n\r\n  span {\r\n    display: block;\r\n\r\n    margin-top: 0.625em;\r\n\r\n    font-weight: 700;\r\n    font-size: 1.125rem;\r\n  }\r\n\r\n  ul {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0.625rem 0;\r\n\r\n    list-style-type: none;\r\n    padding: 0;\r\n\r\n    margin-top: 0.625rem;\r\n\r\n    li {\r\n      display: flex;\r\n      box-shadow: 0 4px 4px rgba(0, 0, 0, 0.25);\r\n      padding: 5px 10px;\r\n    }\r\n  }\r\n`\r\n","import styled from 'styled-components'\r\n\r\nimport { device } from '../../styles/styled-components'\r\n\r\nexport const CharacterInfoWrapper = styled.div`\r\n  padding: 1.5625rem;\r\n\r\n  min-height: 770px;\r\n\r\n  box-shadow: 0 0 20px rgba(0, 0, 0, 0.25);\r\n  background: #fff;\r\n  \r\n  @media ${device.tablet} {\r\n    min-height: 710px;\r\n  }\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const CharacterHeader = styled.div`\r\n  display: flex;\r\n\r\n  img {\r\n    max-width: 100%;\r\n    min-height: 100%;\r\n    object-fit: contain;\r\n  }\r\n\r\n  div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n\r\n    width: 100%;\r\n\r\n    margin-left: 1.5625rem;\r\n\r\n    font-size: 1.5rem;\r\n\r\n    span {\r\n      font-size: 1.125rem;\r\n      font-weight: 700;\r\n      text-transform: uppercase;\r\n\r\n      padding: 0 0 0.625rem;\r\n    }\r\n\r\n    div {\r\n      margin: 0;\r\n\r\n      min-width: 100px;\r\n\r\n      gap: 0.625em 0;\r\n    }\r\n  }\r\n`\r\n","import { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Element } from 'react-scroll'\r\n\r\nimport { useMarvelService } from '../../services/MarvelService'\r\n\r\nimport { Link, StyledReactRouterLink } from '../controls'\r\nimport Spinner from '../elements/Spinner/Spinner'\r\nimport ErrorMessage from '../elements/ErrorMessage/ErrorMessage'\r\nimport Skeleton from '../elements/Skeleton/Skeleton'\r\nimport { CharacterBody } from './CharacterBody'\r\nimport { CharacterInfoWrapper } from './CharacterInfoWrapper'\r\nimport { CharacterHeader } from './CharacterHeader'\r\n\r\nconst CharacterInfo = ({ id }) => {\r\n  const [characterData, setCharacterData] = useState(null)\r\n\r\n  const { loading, error, getCharacter, clearError } = useMarvelService()\r\n\r\n  const onCharLoaded = (char) => {\r\n    setCharacterData(char)\r\n  }\r\n\r\n  const onCharRequest = (id) => {\r\n    clearError()\r\n    getCharacter(id).then(onCharLoaded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (id) onCharRequest(id)\r\n  }, [id])\r\n\r\n  const skeleton = loading || error || characterData ? null : <Skeleton />\r\n  const onLoading = loading ? <Spinner /> : null\r\n  const errorOccurred = error ? <ErrorMessage /> : null\r\n  const content = !loading && !error && characterData ? <View char={characterData} /> : null\r\n\r\n  return (\r\n    <Element name='characterInfo'>\r\n      <CharacterInfoWrapper>\r\n        {onLoading}\r\n        {errorOccurred}\r\n        {skeleton}\r\n        {content}\r\n      </CharacterInfoWrapper>\r\n    </Element>\r\n  )\r\n}\r\n\r\nconst View = ({ char: { id, name, description, thumbnail, homepage, wiki, comics } }) => {\r\n  if (!description) description = 'Description not found'\r\n\r\n  let newComics = []\r\n\r\n  for (let i = 0; i < comics.length; i++)\r\n    if (i < 10)\r\n      newComics.push({\r\n        name: comics[i].name,\r\n      })\r\n    else break\r\n\r\n  return (\r\n    <>\r\n      <CharacterHeader>\r\n        <img src={thumbnail} alt={name} width={150} height={150} />\r\n        <div>\r\n          <span>{name}</span>\r\n          <div>\r\n            <StyledReactRouterLink to={`/characters/${id}`}>homepage</StyledReactRouterLink>\r\n            <Link href={homepage} target='_blank' grey>\r\n              wiki\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </CharacterHeader>\r\n      <CharacterBody>\r\n        <p>{description}</p>\r\n        <span>Comics:</span>\r\n        <ul>\r\n          {comics.length > 0 ? null : 'There is no comics with this character!'}\r\n          {newComics.map(({ name, url }, i) => (\r\n            <li key={i}>{name}</li>\r\n          ))}\r\n        </ul>\r\n      </CharacterBody>\r\n    </>\r\n  )\r\n}\r\n\r\nCharacterInfo.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default CharacterInfo\r\n","import styled from 'styled-components'\r\n\r\nimport { device } from '../../styles/styled-components'\r\n\r\nexport const Grid = styled.ul`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 1.875rem 20px;\r\n\r\n  max-width: 650px;\r\n\r\n  padding: 0;\r\n  margin: 0;\r\n\r\n  list-style-type: none;\r\n\r\n  li {\r\n    display: flex;\r\n  }\r\n\r\n  @media ${device.bootstrapLarge} {\r\n    justify-content: center;\r\n    margin-top: clamp(20px, 10vh, 50px);\r\n  }\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const Style = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 45px;\r\n\r\n  margin: 0 auto;\r\n`\r\n","import { useContext, useEffect, useMemo, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { useMarvelService } from '../../services/MarvelService'\r\nimport {\r\n  CharactersContext,\r\n  CharactersUpdateContext,\r\n} from '../../context/CharactersContext/CharactersContext'\r\n\r\nimport { Grid } from './Grid'\r\nimport { Style } from './Style'\r\nimport Character from '../Character/Character'\r\nimport Spinner from '../elements/Spinner/Spinner'\r\nimport ErrorMessage from '../elements/ErrorMessage/ErrorMessage'\r\nimport ButtonBigger from '../controls/ButtonBigger/ButtonBigger'\r\n\r\nconst CharactersList = ({ onCharSelected }) => {\r\n  const [newCharLoading, setNewCharLoading] = useState(false)\r\n  const [maxReached, setMaxReached] = useState(true)\r\n  const { getAllCharacters, loading, error, cancelRequest, clearError } = useMarvelService()\r\n  const { characters, offset } = useContext(CharactersContext)\r\n  const { addCharacters, changeOffset } = useContext(CharactersUpdateContext)\r\n\r\n  useEffect(() => {\r\n    let isMounted = true\r\n    if (isMounted) initCharacters(0, true)\r\n\r\n    return () => {\r\n      isMounted = false\r\n      cancelRequest()\r\n    }\r\n  }, [])\r\n\r\n  const onCharactersLoaded = ({ data: { results } }) => {\r\n    let maxReached = results.length < 9\r\n\r\n    addCharacters(results)\r\n    setNewCharLoading(false)\r\n    changeOffset(9)\r\n    setMaxReached(maxReached)\r\n  }\r\n\r\n  const initCharacters = (offsetValue = offset, initial) => {\r\n    initial ? setNewCharLoading(false) : setNewCharLoading(true)\r\n    if (!characters.length) getAllCharacters(offsetValue).then(onCharactersLoaded)\r\n    if (characters.length) setMaxReached(false)\r\n  }\r\n\r\n  const loadCharacters = (offsetValue) => {\r\n    getAllCharacters(offsetValue).then(onCharactersLoaded)\r\n    setNewCharLoading(true)\r\n    clearError()\r\n  }\r\n\r\n  const charactersItems = useMemo(() => {\r\n    return characters.map(({ id, name, thumbnail }) => (\r\n      <li key={id}>\r\n        <Character\r\n          id={id}\r\n          name={name}\r\n          img={`${thumbnail.path}.${thumbnail.extension}`}\r\n          onCharSelected={onCharSelected}\r\n        />\r\n      </li>\r\n    ))\r\n  }, [characters])\r\n\r\n  const errorOccurred = error ? <ErrorMessage /> : null\r\n  const onLoading = loading && !newCharLoading ? <Spinner /> : null\r\n\r\n  return (\r\n    <Style>\r\n      {onLoading}\r\n      {errorOccurred}\r\n      {!error && <Grid className='characters-list'>{charactersItems}</Grid>}\r\n      {!maxReached && (\r\n        <ButtonBigger\r\n          disabled={newCharLoading}\r\n          onClick={() => loadCharacters(offset)}\r\n          text='Load More'\r\n          className='More'\r\n        />\r\n      )}\r\n    </Style>\r\n  )\r\n}\r\n\r\nCharactersList.propTypes = {\r\n  onCharSelected: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default CharactersList\r\n","import styled from 'styled-components'\r\nimport { device } from '../../styles/styled-components'\r\n\r\nexport const Style = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n\r\n  width: 230px;\r\n\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    .comics-name {\r\n      color: ${({ theme }) => theme.colors.mainHoverRed};\r\n    }\r\n  }\r\n\r\n  .comics-image {\r\n    height: 350px;\r\n    max-width: 100%;\r\n    object-fit: contain;\r\n\r\n    margin-bottom: auto;\r\n\r\n    user-select: none;\r\n    pointer-events: none;\r\n  }\r\n\r\n  .comics-name {\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n    line-height: 16px;\r\n  }\r\n\r\n  .comics-price {\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n    line-height: 16px;\r\n\r\n    color: ${({ theme }) => theme.colors.mainBgGrey};\r\n  }\r\n\r\n  @media ${device.bootstrapLarge} {\r\n    .comics-image {\r\n    }\r\n  }\r\n`\r\n","import PropTypes from 'prop-types'\r\n\r\nimport { Style } from './Style'\r\nimport ImageWithLoader from '../elements/ImageWithLoader/ImageWithLoader'\r\n\r\nfunction Comics({ thumbnail, title, price }) {\r\n  return (\r\n    <Style>\r\n      <div className='comics-image'>\r\n        <ImageWithLoader className='comics-image' src={thumbnail} alt={title} />\r\n      </div>\r\n      <h4 className='comics-name'>{title}</h4>\r\n      <span className='comics-price'>{price}</span>\r\n    </Style>\r\n  )\r\n}\r\n\r\nComics.propTypes = {\r\n  thumbnail: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  price: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\r\n}\r\n\r\nexport default Comics\r\n","import styled from 'styled-components'\r\n\r\nexport const Grid = styled.div`\r\n  display: grid;\r\n  justify-content: center;\r\n  grid-template-columns: repeat(auto-fit, minmax(225px, auto));\r\n  gap: 55px 65px;\r\n\r\n  margin-top: 2.8125rem;\r\n`\r\n","import { useContext, useEffect, useMemo, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { useMarvelService } from '../../services/MarvelService'\r\nimport { ComicsContext, ComicsUpdateContext } from '../../context/ComicsContext/ComicsContext'\r\n\r\nimport { Grid } from './Grid'\r\nimport { Comics as ComicsItem } from '../index'\r\nimport ButtonBigger from '../controls/ButtonBigger/ButtonBigger'\r\nimport { ErrorMessage, Spinner } from '../elements'\r\n\r\nfunction ComicsList(props) {\r\n  const [newComicsLoading, setNewComicsLoading] = useState(false)\r\n  const [maxReached, setMaxReached] = useState(true)\r\n  const { loading, error, getAllComics, cancelRequest } = useMarvelService()\r\n  const { comics, offset } = useContext(ComicsContext)\r\n  const { addComics, changeOffset } = useContext(ComicsUpdateContext)\r\n\r\n  useEffect(() => {\r\n    let isMounted = true\r\n    if (isMounted) initComics(offset, true)\r\n\r\n    return () => {\r\n      cancelRequest()\r\n      isMounted = false\r\n    }\r\n  }, [])\r\n\r\n  const onComicsLoaded = (comics) => {\r\n    let maxReached = comics.length < 8\r\n\r\n    addComics(comics)\r\n    setNewComicsLoading(false)\r\n    changeOffset(8)\r\n    setMaxReached(maxReached)\r\n  }\r\n\r\n  const initComics = (offsetValue = offset, initial) => {\r\n    initial ? setNewComicsLoading(false) : setNewComicsLoading(true)\r\n    if (!comics.length) getAllComics(offsetValue).then(onComicsLoaded)\r\n    if (comics.length) setMaxReached(false)\r\n  }\r\n\r\n  const loadComics = (offsetValue) => {\r\n    getAllComics(offsetValue).then(onComicsLoaded)\r\n    setNewComicsLoading(true)\r\n  }\r\n\r\n  const onLoading = loading && !newComicsLoading && <Spinner />\r\n  const errorOccurred = error && <ErrorMessage />\r\n  const content = !error\r\n  const comicsItems = useMemo(\r\n    () =>\r\n      comics.map((comics) => (\r\n        <Link key={comics.id} to={`/comics/${comics.id}`}>\r\n          <ComicsItem {...comics} />\r\n        </Link>\r\n      )),\r\n    [comics]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Grid>\r\n        {errorOccurred}\r\n        {onLoading}\r\n        {content && comicsItems}\r\n      </Grid>\r\n      {!maxReached && (\r\n        <ButtonBigger\r\n          disabled={newComicsLoading}\r\n          onClick={() => loadComics(offset)}\r\n          text='Load More'\r\n          className='More'\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ComicsList\r\n","import styled from 'styled-components'\r\n\r\nexport const Style = styled.div`\r\n  padding-bottom: 50px;\r\n\r\n  .More {\r\n    margin: 2.8125rem auto 0;\r\n  }\r\n`\r\n","import { Helmet } from 'react-helmet'\r\n\r\nimport { ErrorBoundary, NewsBoard } from '../../components/elements'\r\nimport { ComicsList } from '../../components'\r\nimport { Style } from './Style'\r\n\r\nfunction Comics() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Marvel comics</title>\r\n        <meta name='description' content='Marvel comics' />\r\n      </Helmet>\r\n      <Style>\r\n        <NewsBoard />\r\n        <ErrorBoundary>\r\n          <ComicsList />\r\n        </ErrorBoundary>\r\n      </Style>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Comics\r\n"],"names":["src","alt","props","useState","loaded","setLoaded","className","style","height","width","backgroundColor","display","onLoad","Style","styled","theme","colors","mainTextWhite","mainBgColor","shadowColor","img","name","id","onCharSelected","darkVibrant","usePalette","data","smooth","document","documentElement","clientWidth","onKeyPress","e","code","to","offset","duration","onClick","ImageWithLoader","CharacterBody","CharacterInfoWrapper","device","CharacterHeader","View","char","description","thumbnail","homepage","comics","wiki","newComics","i","length","push","href","target","grey","map","url","characterData","setCharacterData","useMarvelService","loading","error","getCharacter","clearError","onCharLoaded","useEffect","then","onCharRequest","skeleton","Skeleton","onLoading","Spinner","errorOccurred","ErrorMessage","content","Grid","newCharLoading","setNewCharLoading","maxReached","setMaxReached","getAllCharacters","cancelRequest","useContext","CharactersContext","characters","CharactersUpdateContext","addCharacters","changeOffset","isMounted","initCharacters","onCharactersLoaded","results","offsetValue","initial","charactersItems","useMemo","path","extension","ButtonBigger","disabled","text","mainHoverRed","mainBgGrey","title","price","newComicsLoading","setNewComicsLoading","getAllComics","ComicsContext","ComicsUpdateContext","addComics","initComics","onComicsLoaded","comicsItems","Helmet"],"sourceRoot":""}